#!/bin/bash

# The following documentation was used as a basis for configuration of the TLSRoute and 
# TLS passthrough to the Nginx server. Modifications were made as istio is deployed in
# ambient mode and not with a sidecar. In addition cert-manager was added to generate the
# required certificates and secrets.
# https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-sni-passthrough/

# Step 1 - Deploys and configures the following:
#            a) minikube, minikube addons (dashboard, metrics-server);
#            b) configures encryption for etcd storage
#            c) installs istio in ambient mode
#            d) installs kubernetes gateway API CRDs
#            e) creates cert-manager namespace
#            f) installs cert-manager gateway CRDs
#            g) installs cert-manager with gateway enabled
#            h) Installs nginx with TLS passthrough to the server.
#            i) Installs bookinfo, apple into separate namespaces using HTTPRoute

# This learning prototype was developed and tested using the following:
#   a) Ubuntu             - 20.04.6 LTS
#   b) Minikube           - 1.34.0
#   c) Kubernetes         - 1.31.0
#   d) Docker             - 27.2.0
#   d) Cert-manager       - 1.15.3
#   e) Istio              - 1.23.2
#   f) Metallb            - 0.9.6
#   g) Kubernetes Gateway - 1.1.0
#   h) Machine config - Processor - Intel® Core™ i7-7700K CPU @ 4.20GHz × 8 
#                       Memory    - 64 GB
#            
# Open terminal 1
# Delete prior minikube ( if used and configured prior)
minikube delete

# Start minikube - configure the settings to your requirements and hardware
# Note - normally I use kvm2 as the vm-driver. However istio cni in ambient mode does not
# currently work with kvm2 due to cni incompatibility. The work around is to use the 
# docker vm-driver.
minikube start --cpus 4 --memory 12288 --vm-driver docker --cni kindnet --disk-size 100g

# Addons
minikube addons enable dashboard

# Deploy the addon loadbalancer metallb
minikube addons enable metallb

# Configure loadbalancer ip address range within the same range as the minikube ip
# The configuration is a start ip ( ie. 192.168.39.40 ) and an end ip that makes a 
# range of 10 ip addresses. The range should not overlap the minikube ip
minikube ip
minikube addons configure metallb
  -- Enter Load Balancer Start IP: 
  -- Enter Load Balancer End IP:

# Start dashboard
minikube dashboard

# Open up a new (2nd) terminal
# Install the Kubernetes Gateway API CRDs (experimental also includes standard)
kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/experimental-install.yaml

# Install istio in ambient mode
istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=ambient --skip-confirmation

#### Install cert-manager with the following steps ####
# Create cert-manger namespace
kubectl create namespace cert-manager

# Deploy cert-manager gateway CRDs
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.crds.yaml

# Deploy cert-manager with gateway api enabled
helm install cert-manager --version 1.15 jetstack/cert-manager --namespace cert-manager \
  --set config.apiVersion="controller.config.cert-manager.io/v1alpha1" \
  --set config.kind="ControllerConfiguration" \
  --set config.enableGatewayAPI=true \
  --set "extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}"
  
# Set path for kube deployments
PROTODIR=/media/tim/ExtraDrive1/Projects/learn-basic-gateway-api/Proto-07

########## Beginning of Apple App deployment ############################################
#The following section deploys the apple (http echo) app using http into its own namespace
kubectl create namespace apple
kubectl apply -n apple -f $PROTODIR/kube/apple.yaml

# Verify they are running - this takes a few seconds before it is ready
kubectl get pods -n apple

# Deploy apple-gateway
kubectl apply -n apple -f $PROTODIR/kube/apple-gateway.yaml

# Check the status
kubectl get gateway -n apple

# Add the app to the service mesh by labeling the (default) namespace.
# Note - this automatically starts mTls between the pods 
kubectl label namespace apple istio.io/dataplane-mode=ambient

# There are several ways provided to access the Apple service external to the minikube environment.
# 1st - Set up host and port resolution for curl
export APPLE_INGRESS_HOST=$(kubectl get gtw apple-gateway -n apple -o jsonpath='{.status.addresses[0].value}')
export APPLE_INGRESS_PORT=$(kubectl get gtw apple-gateway -n apple -o jsonpath='{.spec.listeners[?(@.name=="http")].port}')

echo "APPLE_INGRESS_HOST = $APPLE_INGRESS_HOST"
echo "APPLE_INGRESS_PORT = $APPLE_INGRESS_PORT"

curl -kL -HHost:apple.example.com --resolve "apple.example.com:$APPLE_INGRESS_PORT:$APPLE_INGRESS_HOST" "http://apple.example.com:$APPLE_INGRESS_PORT/apple" 
# Should return "Apple Service has been invoked via the Gateway."

# 2nd - Set up port forward to verify external access to the Apple app
# Go to another terminal and set the port forward for use with curl or within the browser
kubectl port-forward -n apple svc/apple-gateway-istio 8080:80

# In a browser
http://localhost:8080/apple

# or via curl
curl -kL http://localhost:8080/apple
############## End of Apple deployment ####################################################


############## Beginning of the Istio sample app Bookinfo deployment ######################
# Deploy Sample Bookinfo app into the book namespace
kubectl create namespace book

kubectl apply -n book -f $PROTODIR/kube/bookinfo.yaml
kubectl apply -n book -f $PROTODIR/kube/bookinfo-versions.yaml

# Verify they are running - this takes about 2 minutes before it is ready
kubectl get pods -n book

# Deploy bookinfo-gateway
kubectl apply -n book -f $PROTODIR/kube/bookinfo-gateway.yaml

# Check the status
kubectl get gateway -n book

# Add the app to the service mesh by labeling the (default) namespace.
# Note - this automatically starts mTls between the pods 
kubectl label namespace book istio.io/dataplane-mode=ambient

# Verify external access to the bookinfo app. The Bookinfo deployment does not include a host
# definition. So the host and port resolution is not available for external access.
# Go to another terminal and set the port forward
kubectl port-forward -n book svc/bookinfo-gateway-istio 9080:80

# Open a new browser tab and go to
http://localhost:9080/productpage


############## Beginning of Mango Deployment ##############################################
# Deploy Mango with tls
kubectl create namespace mango

# Deploy Mango gateway tls issuers and certs
kubectl -n mango apply -f $PROTODIR/kube/root-tls-cert-issuer.yaml
kubectl -n mango wait --timeout=30s --for=condition=Ready issuer/root-tls-cert-issuer

# Use the self-signing issuer to generate the org Issuers, one for each org.
kubectl -n mango apply -f $PROTODIR/kube/mango-tls-cert-issuer.yaml
kubectl -n mango wait --timeout=30s --for=condition=Ready issuer/mango-tls-cert-issuer

kubectl apply -f $PROTODIR/kube/mango.yaml -n mango

# Review and wait until Ready
kubectl get pods -n mango

# Deploy mango-gateway and route
kubectl apply -n mango -f $PROTODIR/kube/mango-gateway.yaml

# Check the status - wait until the Address is available and PROGRAMMED=True
kubectl get gateway -n mango
kubectl wait --for=condition=programmed gtw mango-gateway -n mango

# Add the app to the service mesh by labeling the (default) namespace.
# Note - this automatically starts mTls between the pods 
kubectl label namespace mango istio.io/dataplane-mode=ambient

export MANGO_INGRESS_HOST=$(kubectl get gtw mango-gateway -n mango -o jsonpath='{.status.addresses[0].value}')
export MANGO_HTTP_PORT=$(kubectl    get gtw mango-gateway -n mango -o jsonpath='{.spec.listeners[?(@.name=="http")].port}')
export MANGO_HTTPS_PORT=$(kubectl   get gtw mango-gateway -n mango -o jsonpath='{.spec.listeners[?(@.name=="https")].port}')

echo "MANGO_INGRESS_HOST = $MANGO_INGRESS_HOST"
echo "MANGO_HTTP_PORT    = $MANGO_HTTP_PORT"
echo "MANGO_HTTPS_PORT   = $MANGO_HTTPS_PORT"

# Obtain mango tls credential
kubectl get secret mango-credential -n mango -o "jsonpath={.data['ca\.crt']}" | base64 -d > $PROTODIR/certs/tls.crt

# Test https - Should return "juicy mango"
curl -v -HHost:mango.example.com --resolve "mango.example.com:$MANGO_HTTPS_PORT:$MANGO_INGRESS_HOST" \
  --cacert $PROTODIR/certs/tls.crt "https://mango.example.com:$MANGO_HTTPS_PORT/mango"
  
# Test http
curl -kL -HHost:mango.example.com --resolve "mango.example.com:80:$MANGO_INGRESS_HOST" "http://mango.example.com:$MANGO_HTTP_PORT/mango" 
## Note - A success returns "juicy mango"
############## End of Mango deployment ######################################################

############## The following section deploys the Nginx server with a TLSRoute passthrough.
# Deploy Nginx with tls
kubectl create namespace nginx

# Deploy Nginx gateway tls issuers and certs
kubectl -n nginx apply -f $PROTODIR/kube/root-tls-cert-issuer.yaml
kubectl -n nginx wait --timeout=30s --for=condition=Ready issuer/root-tls-cert-issuer

# Use the self-signing issuer to generate the org Issuers, one for each org.
kubectl -n nginx apply -f $PROTODIR/kube/nginx-tls-cert-issuer.yaml
kubectl -n nginx wait --timeout=30s --for=condition=Ready issuer/nginx-tls-cert-issuer

# Create a ConfigMp to hold the nginx conf
kubectl create configmap -n nginx nginx-configmap --from-file=nginx.conf=$PROTODIR/conf/nginx.conf

kubectl apply -f $PROTODIR/kube/nginx.yaml -n nginx

# Review and wait until Ready
kubectl get pods -n nginx

# Deploy nginx-gateway and route
kubectl apply -n nginx -f $PROTODIR/kube/nginx-gateway.yaml

# Check the status - wait until the Address is available and PROGRAMMED=True
kubectl get gateway -n nginx
kubectl wait --for=condition=programmed gtw nginx-gateway -n nginx

# Add the app to the service mesh by labeling the (default) namespace.
# Note - this automatically starts mTls between the pods 
kubectl label namespace nginx istio.io/dataplane-mode=ambient

export NGINX_INGRESS_HOST=$(kubectl get gtw nginx-gateway -n nginx -o jsonpath='{.status.addresses[0].value}')
export NGINX_INGRESS_PORT=$(kubectl get gtw nginx-gateway -n nginx -o jsonpath='{.spec.listeners[?(@.name=="https")].port}')

echo "NGINX_INGRESS_HOST = $NGINX_INGRESS_HOST"
echo "NGINX_INGRESS_PORT = $NGINX_INGRESS_PORT"

# Obtain nginx server tls credential
kubectl get secret nginx-server-certs -n nginx -o "jsonpath={.data['ca\.crt']}" | base64 -d > $PROTODIR/certs/tls.crt

# Test https - Should return "Welcome to Nginx"
curl -v -HHost:nginx.example.com --resolve "nginx.example.com:$NGINX_INGRESS_PORT:$NGINX_INGRESS_HOST" \
  --cacert $PROTODIR/certs/tls.crt "https://nginx.example.com:$NGINX_INGRESS_PORT"

