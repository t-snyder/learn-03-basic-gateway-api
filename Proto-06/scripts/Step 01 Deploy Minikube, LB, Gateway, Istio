#!/bin/bash

# The following documentation was used as a basis for configuration of the TLSRoute and 
# TLS passthrough to the Nginx server. Modifications were made as istio is deployed in
# ambient mode and not with a sidecar. In addition cert-manager was added to generate the
# required certificates and secrets.
# https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-sni-passthrough/

# Step 1 - Deploys and configures the following:
#            a) minikube, minikube addons (dashboard, metrics-server);
#            b) configures encryption for etcd storage
#            c) installs istio in ambient mode
#            d) installs kubernetes gateway API CRDs
#            e) creates cert-manager namespace
#            f) installs cert-manager gateway CRDs
#            g) installs cert-manager with gateway enabled
#            h) Installs nginx with TLS passthrough to the server.

# This learning prototype was developed and tested using the following:
#   a) Ubuntu             - 20.04.6 LTS
#   b) Minikube           - 1.34.0
#   c) Kubernetes         - 1.31.0
#   d) Docker             - 27.2.0
#   d) Cert-manager       - 1.15.3
#   e) Istio              - 1.23.2
#   f) Metallb            - 0.9.6
#   g) Kubernetes Gateway - 1.1.0
#   h) Nginx Server       - current
#   h) Machine config - Processor - Intel® Core™ i7-7700K CPU @ 4.20GHz × 8 
#                       Memory    - 64 GB
#            
# Open terminal 1
# Delete prior minikube ( if used and configured prior)
minikube delete

# Start minikube - configure the settings to your requirements and hardware
# Note - normally I use kvm2 as the vm-driver. However istio cni in ambient mode does not
# currently work with kvm2 due to cni incompatibility. The work around is to use the 
# docker vm-driver.
minikube start --cpus 4 --memory 12288 --vm-driver docker --cni kindnet --disk-size 100g

# Addons
minikube addons enable dashboard

# Deploy the addon loadbalancer metallb
minikube addons enable metallb

# Configure loadbalancer ip address range within the same range as the minikube ip
# The configuration is a start ip ( ie. 192.168.39.40 ) and an end ip that makes a 
# range of 10 ip addresses. The range should not overlap the minikube ip
minikube ip
minikube addons configure metallb
  -- Enter Load Balancer Start IP: 
  -- Enter Load Balancer End IP:

# Start dashboard
minikube dashboard

# Open up a new (2nd) terminal
# Install the Kubernetes Gateway API CRDs (experimental also includes standard)
kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/experimental-install.yaml

# Install istio in ambient mode
istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=ambient --skip-confirmation

#### Install cert-manager with the following steps ####
# Create cert-manger namespace
kubectl create namespace cert-manager

# Deploy cert-manager gateway CRDs
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.crds.yaml

# Deploy cert-manager with gateway api enabled
helm install cert-manager --version 1.15 jetstack/cert-manager --namespace cert-manager \
  --set config.apiVersion="controller.config.cert-manager.io/v1alpha1" \
  --set config.kind="ControllerConfiguration" \
  --set config.enableGatewayAPI=true \
  --set "extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}"
  
# Set path for kube deployment artifacts
PROTODIR=/media/tim/ExtraDrive1/Projects/learn-basic-gateway-api/Proto-06

# Deploy Nginx with tls
kubectl create namespace nginx

# Deploy Nginx gateway tls issuers and certs
kubectl -n nginx apply -f $PROTODIR/kube/root-tls-cert-issuer.yaml
kubectl -n nginx wait --timeout=30s --for=condition=Ready issuer/root-tls-cert-issuer

# Use the self-signing issuer to generate the org Issuers, one for each org.
kubectl -n nginx apply -f $PROTODIR/kube/nginx-tls-cert-issuer.yaml
kubectl -n nginx wait --timeout=30s --for=condition=Ready issuer/nginx-tls-cert-issuer

# Create a ConfigMp to hold the nginx conf
kubectl create configmap -n nginx nginx-configmap --from-file=nginx.conf=$PROTODIR/conf/nginx.conf

kubectl apply -f $PROTODIR/kube/nginx.yaml -n nginx

# Review and wait until Ready
kubectl get pods -n nginx

# Deploy nginx-gateway and route
kubectl apply -n nginx -f $PROTODIR/kube/nginx-gateway.yaml

# Check the status - wait until the Address is available and PROGRAMMED=True
kubectl get gateway -n nginx
kubectl wait --for=condition=programmed gtw nginx-gateway -n nginx

# Add the app to the service mesh by labeling the namespace.
# Note - this automatically starts mTls between the pods 
kubectl label namespace nginx istio.io/dataplane-mode=ambient

export INGRESS_HOST=$(kubectl get gtw nginx-gateway -n nginx -o jsonpath='{.status.addresses[0].value}')
export SECURE_INGRESS_PORT=$(kubectl get gtw nginx-gateway -n nginx -o jsonpath='{.spec.listeners[?(@.name=="https")].port}')

echo "INGRESS_HOST = $INGRESS_HOST"
echo "SECURE_INGRESS_PORT = $SECURE_INGRESS_PORT"

# Obtain nginx service tls credential
kubectl get secret nginx-server-certs -n nginx -o "jsonpath={.data['ca\.crt']}" | base64 -d > $PROTODIR/certs/tls.crt

# Test https - Should return "Welcome to Nginx"
curl -v -HHost:nginx.example.com --resolve "nginx.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST" \
  --cacert $PROTODIR/certs/tls.crt "https://nginx.example.com:$SECURE_INGRESS_PORT"

