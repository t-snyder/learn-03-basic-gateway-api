#!/bin/bash

# Step 1 - Deploys and configures the following:
#            a) minikube, minikube addons (dashboard, metrics-server);
#            b) configures encryption for etcd storage
#            c) installs istio in ambient mode
#            d) installs kubernetes gateway API CRDs
#            e) creates metallb loadbalancer
#            f) creates certificates with openssl
#            g) installs mango http-echo app with gateway enabled

# This learning prototypes were developed and tested using the following:
#   a) Ubuntu             - 20.04.6 LTS
#   b) Minikube           - 1.34.0
#   c) Kubernetes         - 1.31.0
#   d) Docker             - 27.2.0
#   e) Istio              - 1.23.2
#   f) Kubernetes Gateway - 1.1.0
#   g) Machine config - Processor - Intel® Core™ i7-7700K CPU @ 4.20GHz × 8 
#                       Memory    - 64 GB
#            
# Open terminal 1
# Delete prior minikube ( if used and configured prior)
minikube delete

# Start minikube - configure the settings to your requirements and hardware
# Note - normally I use kvm2 as the vm-driver. However istio cni in ambient mode does not
# currently work with kvm2 due to cni incompatibility. The work around is to use the 
# docker vm-driver.
minikube start --cpus 4 --memory 12288 --vm-driver docker --cni kindnet --disk-size 100g

# Addons
minikube addons enable dashboard

# Deploy the addon loadbalancer metallb
minikube addons enable metallb

# Configure loadbalancer ip address range within the same range as the minikube ip
# The configuration is a start ip ( ie. 192.168.39.40 ) and an end ip that makes a 
# range of 10 ip addresses. The range should not overlap the minikube ip
minikube ip
minikube addons configure metallb
  -- Enter Load Balancer Start IP: 
  -- Enter Load Balancer End IP:

# Start dashboard
minikube dashboard

# Open up a new (2nd) terminal
# Install the Kubernetes Gateway API CRDs
kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/standard-install.yaml

# Install istio in ambient mode
istioctl install --set profile=ambient --skip-confirmation

# Deploy apple app into the default namespace
PROTODIR=/media/tim/ExtraDrive1/Projects/learn-03-basic-gateway-api/Proto-03

# Deploy Mango with tls
kubectl create namespace mango

kubectl apply -f $PROTODIR/kube/mango.yaml -n mango

# Review and wait until Ready
kubectl get pods -n mango

# Create root cert and key
mkdir -p $PROTODIR/example_certs1
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=example Inc./CN=example.com' -keyout $PROTODIR/example_certs1/example.com.key -out $PROTODIR/example_certs1/example.com.crt

# Create mango cert and key
openssl req -out $PROTODIR/example_certs1/mango.example.com.csr -newkey rsa:2048 -nodes -keyout $PROTODIR/example_certs1/mango.example.com.key -subj "/CN=mango.example.com/O=mango organization"
openssl x509 -req -sha256 -days 365 -CA $PROTODIR/example_certs1/example.com.crt -CAkey $PROTODIR/example_certs1/example.com.key -set_serial 0 -in $PROTODIR/example_certs1/mango.example.com.csr -out $PROTODIR/example_certs1/mango.example.com.crt

# Create a secret with the certs and key
kubectl create -n mango secret tls mango-credential \
  --key=$PROTODIR/example_certs1/mango.example.com.key \
  --cert=$PROTODIR/example_certs1/mango.example.com.crt

# Deploy mango-gateway and route
kubectl apply -n mango -f $PROTODIR/kube/mango-gateway.yaml

# Check the status - wait until the Address is available and PROGRAMMED=True
kubectl get gateway -n mango
kubectl wait --for=condition=programmed gtw mango-gateway -n mango

# Add the app to the service mesh by labeling the (default) namespace.
# Note - this automatically starts mTls between the pods 
kubectl label namespace mango istio.io/dataplane-mode=ambient

export INGRESS_HOST=$(kubectl get gtw mango-gateway -n mango -o jsonpath='{.status.addresses[0].value}')
export INGRESS_PORT=$(kubectl get gtw mango-gateway -n mango -o jsonpath='{.spec.listeners[?(@.name=="http")].port}')
export SECURE_INGRESS_PORT=$(kubectl get gtw mango-gateway -n mango -o jsonpath='{.spec.listeners[?(@.name=="https")].port}')

echo "INGRESS_HOST = $INGRESS_HOST"
echo "INGRESS_PORT = $INGRESS_PORT"
echo "SECURE_INGRESS_PORT = $SECURE_INGRESS_PORT"

# Test https - Should return "juicy mango"
curl -v -HHost:mango.example.com --resolve "mango.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST" \
  --cacert $PROTODIR/example_certs1/example.com.crt "https://mango.example.com:$SECURE_INGRESS_PORT/mango"
  
# Test http
curl -kL -HHost:mango.example.com --resolve "mango.example.com:80:$INGRESS_HOST" "http://mango.example.com:$INGRESS_PORT/mango" 
